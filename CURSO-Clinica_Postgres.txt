  CREATE DATABASE "Clinica_Postgres"
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8';
	
CREATE SCHEMA CLINICA AUTHORIZATION postgres;

DROP SCHEMA PUBLIC;

CREATE DOMAIN CLINICA.ID_PACIENTE AS CHAR(6) NOT NULL
	CHECK (VALUE ~ '^[P]{1}[-]{1}\d{4}$'); 

CREATE DOMAIN CLINICA.ID_MEESPECIALISTA AS CHAR(7) NOT NULL
	CHECK (VALUE ~ '^[ME]{2}[-]{1}\d{4}$');
	
CREATE DOMAIN CLINICA.ID_CITA AS CHAR(7) NOT NULL
	CHECK (VALUE ~ '^[CM]{2}[-]{1}\d{4}$'); 
	
	
CREATE TABLE CLINICA.PACIENTE (
	pk_idPaciente CLINICA.ID_PACIENTE,
	nombre VARCHAR(20) NOT NULL,
	apellido VARCHAR(20) NOT NULL,
	sexo CHAR(1) NOT NULL,
	fechaNacimiento DATE NOT NULL,
	ciudad VARCHAR(20) NOT NULL,
	estado VARCHAR(20) NOT NULL,
	telefono CHAR(10) UNIQUE,
	PRIMARY KEY (pk_idPaciente)
);

CREATE TABLE CLINICA.ESPECIALISTA(
	pk_idEspecialista CLINICA.ID_MEESPECIALISTA,
	nombre VARCHAR(20) NOT NULL,
	apellido VARCHAR(20) NOT NULL,
	sexo CHAR(1) NOT NULL,
	fechaNacimiento DATE NOT NULL,
	especialidad VARCHAR(30) NOT NULL,
	PRIMARY KEY (pk_idEspecialista)
);

CREATE TABLE CLINICA.EXPEDIENTE (
	pk_idPaciente CLINICA.ID_PACIENTE,
	tipoSangre VARCHAR(10) NOT NULL,
	tipoAlergia VARCHAR(50) NOT NULL,
	padecimientoCro VARCHAR(50) NOT NULL,
	fechaCreacion TIMESTAMP NOT NULL,
	PRIMARY KEY (pk_idPaciente),
	FOREIGN KEY (pk_idPaciente) REFERENCES CLINICA.PACIENTE(pk_idPaciente)
	ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE CLINICA.EXPEDIENTE_DIAGNOSTICO(
	folio SERIAL NOT NULL,
	fk_idEspecialista CLINICA.ID_MEESPECIALISTA,
	fk_idPaciente CLINICA.ID_PACIENTE,
	edad CHAR(3) NOT NULL,
	peso CHAR(3) NOT NULL,
	altura CHAR(4) NOT NULL,
	IMC CHAR(5) NOT NULL,
	nivelPeso CHAR(10) NOT NULL,
	presionArterial CHAR(8) NOT NULL,
	diagnostico VARCHAR(150) NOT NULL,
	recetario VARCHAR(150) NOT NULL,
	fechaCreacion TIMESTAMP NOT NULL,
	PRIMARY KEY (folio),
	FOREIGN KEY (fk_idEspecialista) REFERENCES CLINICA.ESPECIALISTA(pk_idEspecialista)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (fk_idPaciente) REFERENCES CLINICA.EXPEDIENTE(pk_idPaciente)
	ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE CLINICA.CITA (
	pk_idCita CLINICA.ID_CITA,
	fk_idPaciente CLINICA.ID_PACIENTE,
	fecha DATE NOT NULL,
	hora TIME NOT NULL,
	PRIMARY KEY (pk_idCita),
	FOREIGN KEY (fk_idPaciente) REFERENCES CLINICA.PACIENTE(pk_idPaciente)
	ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE CLINICA.AGENDAR_CITA(
	fk_idCita CLINICA.ID_CITA,
	fk_idEspecialista CLINICA.ID_MEESPECIALISTA,
	consultario VARCHAR(20) NOT NULL,
	fechaCita DATE NOT NULL,
	horaCita TIME NOT NULL,
	turno VARCHAR(10) NOT NULL,
	status VARCHAR(10) NOT NULL,
	observaciones VARCHAR(100) NOT NULL,
	PRIMARY KEY (fk_idCIta, fk_idEspecialista),
	FOREIGN KEY (fk_idCita) REFERENCES CLINICA.CITA (pk_idCita)
	ON UPDATE CASCADE ON DELETE CASCADE,
	FOREIGN KEY (fk_idEspecialista) REFERENCES CLINICA.ESPECIALISTA(pk_idEspecialista)
	ON UPDATE CASCADE ON DELETE CASCADE
);

--AGREGAR UNA COLUMNA 
ALTER TABLE CLINICA.PACIENTE ADD COLUMN EJEMPLO VARCHAR(30)
---BORRAR UNA COLUMNA
ALTER TABLE CLINICA.PACIENTE DROP COLUMN EJEMPLO
 --CAMBIAR TIPO DE DATO
 ALTER TABLE CLINICA.PACIENTE ALTER COLUMN EJEMPLO TYPE CHAR(50)
 SELECT * FROM CLINICA.PACIENTE
 --RENOMBRAR COLUMNA 
 ALTER TABLE CLINICA.PACIENTE RENAME COLUMN EJEMPLO TO EJEMPLO_NUEVO
 --RENOMBRAR TABLA
 ALTER TABLE CLINICA.PACIENTE_NUEVO RENAME TO  PACIENTE

--DROP TABLE ELIMINAR UNA TABLA
DROP TABLE CLINICA.PACIENTE
--DROP TABLE ELIMINAR UNA TABLA QUE DEPENDE DE OTRAS
DROP TABLE CLINICA.PACIENTE CASCADE

--INSERTAR DATOS 

--INSERTAR DATOS DE PACIENTE
SELECT * FROM CLINICA.PACIENTE
INSERT INTO CLINICA.PACIENTE VALUES 
('P-0001', 'DANIEL', 'CARMONA', 'M', '1998-12-07', 'MEXICO', 'MEXICO', '5512343337'),
('P-0002', 'JUAN', 'HERNANDEZ', 'M', '1990-07-21', 'MONTERREY', 'NUEVO LEON', '551234321'),
('P-0003', 'FERNANDA', 'MORALES', 'F', '1973-07-01', 'MEXICO', 'MEXICO', '5412309872'),
('P-0004', 'ANDREA', 'ZUÑIGA', 'F', '2000-12-02', 'GUADALAJARA', 'JALISCO', '3309876522'),
('P-0005', 'ALBERTO', 'PEREYRA', 'M', '1986-10-23', 'MEXICO', 'MEXICO', '5565423983'),
('P-0006', 'KAREN', 'SOTO', 'F', '1978-07-07', 'MEXICO', 'MEXICO', '5565423097'),
('P-0007', 'ANDRES', 'ORTIZ', 'M','1990-10-09', 'MONTERREY', 'MEXICO', '5698782347'),
('P-0008', 'LESLY', 'RODRIGUEZ', 'F', '2001-02-11', 'MEXICO', 'MEXICO', '5543454352'),
('P-0009', 'ENRIQUE', 'VERA', 'M', '1996-11-12', 'GUADALAJARA', 'JALISCO', '3309815273'),
('P-0010', 'VICTORIA', 'SOLIS', 'F', '2002-03-10', 'MEXICO', 'MEXICO', '5565278126');

--INSERTAR DATOS DE ESPECIALISTA
SELECT * FROM  CLINICA.ESPECIALISTA 
INSERT INTO CLINICA.ESPECIALISTA VALUES 
('ME-0001', 'REYNA', 'GUADALUPE', 'F', '1986-01-01', 'MEDICO GENERAL'),
('ME-0002', 'ENRIQUE', 'ORTIZ', 'M', '1968-10-01', 'NEFROLOGIA'),
('ME-0003', 'FELIPE', 'HERNANDEZ', 'M', '1980-10-02', 'MEDICO GENERAL'),
('ME-0004', 'KENIA', 'LOPEZ', 'F', '1973-01-01', 'PEDIATRA'),
('ME-0005', 'JUAN', 'MARTINEZ', 'M', '1980-02-23', 'MEDICO GENERAL');

SELECT * FROM CLINICA.ESPECIALISTA
--INSERTAR DATOS DE CITA

INSERT INTO CLINICA.CITA VALUES 
('CM-0001', 'P-0001', '2022-10-01', '12:00'),
('CM-0002', 'P-0002', '2022-10-01', '12:20'),
('CM-0003', 'P-0003', '2022-10-02', '12:20'),
('CM-0004', 'P-0004', '2022-10-02', '10:00'),
('CM-0005', 'P-0005', '2022-10-03', '08:20'),
('CM-0006', 'P-0006', '2022-10-03', '12:20'),
('CM-0007', 'P-0007', '2022-10-04', '12:20'),
('CM-0008', 'P-0008', '2022-10-04', '10:00'),
('CM-0009', 'P-0009', '2022-10-04', '08:20'),
('CM-0010', 'P-0010', '2022-10-05', '08:20');

--INSERTAR DATOS DE AGENDAR CITA

INSERT INTO CLINICA.AGENDAR_CITA VALUES 
('CM-0001', 'ME-0001', 'CONSULTORIO 1', '2022-10-04', '12:00', 'MATUTINO', 'ESPERA', 'NA'),
('CM-0002', 'ME-0001', 'CONSULTORIO 1', '2022-10-04', '12:20', 'MATUTINO', 'ESPERA', 'NA'),
('CM-0003', 'ME-0002', 'CONSULTORIO 2', '2022-10-05', '12:00', 'MATUTINO', 'ESPERA', 'NA'),
('CM-0004', 'ME-0002', 'CONSULTORIO 2', '2022-10-05', '12:00', 'MATUTINO', 'ESPERA', 'NA'),
('CM-0005', 'ME-0003', 'CONSULTORIO 3', '2022-10-06', '12:00', 'MATUTINO', 'ESPERA', 'NA'),
('CM-0006', 'ME-0003', 'CONSULTORIO 3', '2022-10-07', '14:00', 'VESPERTINO', 'ESPERA', 'NA'),
('CM-0007', 'ME-0003', 'CONSULTORIO 3', '2022-10-07', '14:20', 'VESPERTINO', 'ESPERA', 'NA'),
('CM-0008', 'ME-0004', 'CONSULTORIO 4', '2022-10-08', '13:00', 'VESPERTINO', 'ESPERA', 'NA'),
('CM-0009', 'ME-0004', 'CONSULTORIO 4', '2022-10-08', '13:20', 'VESPERTINO', 'ESPERA', 'NA'),
('CM-0010', 'ME-0005', 'CONSULTORIO 5', '2022-10-08', '15:00', 'VESPERTINO', 'ESPERA', 'NA');


--INSERTAR DATOS DE EXPEDIENTE
SELECT * FROM CLINICA.EXPEDIENTE
INSERT INTO CLINICA.EXPEDIENTE VALUES
('P-0001', 'B POSITIVO', 'NA', 'NA', '2022-06-10'),
('P-0002', 'B NEGATIVO', 'ALERGIA AL POLVO', 'NA', '2022-06-10'),
('P-0003', 'O NEGATIVO', 'NA', 'DIABETES', '2022-06-14'),
('P-0004', 'B POSITIVO', 'ALERGIA A LOS MARISCOS', 'ASMA', '2022-06-15'),
('P-0005', 'B POSITIVO', 'NA', 'DIABETES', '2022-06-16'),
('P-0006', 'B POSITIVO', 'ALERGIA AL POLVO', 'NA', '2022-06-17'),
('P-0007', 'B POSITIVO', 'NA', 'CANCER', '2022-06-20'),
('P-0008', 'B POSITIVO', 'NA', 'NA', '2022-06-24'),
('P-0009', 'B POSITIVO', 'NA', 'NA', '2022-07-02'),
('P-0010', 'B POSITIVO', 'NA', 'NA', '2022-07-06');


--INSERTAR DATOS DE EXPEDIENTE_DIAGNOSTICO
INSERT INTO CLINICA.EXPEDIENTE_DIAGNOSTICO 
(fk_idespecialista, fk_idpaciente, edad, peso, altura, imc, nivelpeso, presionarterial, diagnostico, recetario,
 fechacreacion)
VALUES 
('ME-0001', 'P-0001', '24', '70', '1.70', '24.0', 'NORMAL', '120/70', 'NA', 'NA', '2022-11-22'),
('ME-0001', 'P-0002', '33', '80', '1.77', '27.0', 'SOBREPESO', '125/73', 'NA', 'NA', '2022-11-23'),
('ME-0001', 'P-0003', '45', '62', '1.64', '26.6', 'NORMAL', '130/70', 'NA', 'NA', '2022-11-24'),
('ME-0002', 'P-0003', '45', '62', '1.64', '26.6', 'NORMAL', '129/70', 'NA', 'NA', '2022-11-24'),
('ME-0002', 'P-0004', '23', '65', '1.60', '23.0', 'NORMAL', '125/70', 'NA', 'NA', '2022-11-25'),
('ME-0003', 'P-0005', '37', '90', '1.77', '29.0', 'OBESIDAD', '129/80', 'NA', 'NA', '2022-11-25'),
('ME-0003', 'P-0005', '37', '90', '1.77', '29.0', 'OBESIDAD', '128/78', 'NA', 'NA', '2022-11-25'),
('ME-0003', 'P-0006', '46', '72', '1.68', '24.0', 'NORMAL', '120/69', 'NA', 'NA', '2022-11-26'),
('ME-0003', 'P-0007', '31', '76', '1.77', '24.0', 'NORMAL', '125/73', 'NA', 'NA', '2022-11-27'),
('ME-0004', 'P-0007', '31', '76', '1.77', '24.0', 'NORMAL', '125/67', 'NA', 'NA', '2022-11-27'),
('ME-0004', 'P-0008', '21', '68', '1.63', '24.0', 'NORMAL', '119/69', 'NA', 'NA', '2022-11-29'),
('ME-0005', 'P-0009', '26', '90', '1.75', '29.0', 'SOBREPESO', '132/76', 'NA', 'NA', '2022-12-01'),
('ME-0005', 'P-0009', '26', '90', '1.75', '29.0', 'SOBREPESO', '130/74', 'NA', 'NA', '2022-12-01'),
('ME-0005', 'P-0010', '18', '60', '1.59', '23.0', 'NORMAL', '120/68', 'NA', 'NA', '2022-12-02'),
('ME-0005', 'P-0010', '18', '60', '1.59', '23.0', 'NORMAL', '119/65', 'NA', 'NA', '2022-12-02');

--CONSULTAS
SELECT * FROM CLINICA.PACIENTE;
SELECT * FROM CLINICA.ESPECIALISTA;
SELECT * FROM CLINICA.CITA;
SELECT * FROM CLINICA.AGENDAR_CITA;
SELECT * FROM CLINICA.EXPEDIENTE;
SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;
--modeificar registro 
UPDATE CLINICA.PACIENTE SET estado = 'JALISCO' WHERE pk_idPaciente = 'P-0004'
--operador AND - CUMPLE LAS O MAS CONDICIONES
UPDATE CLINICA.PACIENTE SET ciudad ='BOGOTA' WHERE SEXO = 'M' AND estado = 'MEXICO'
SELECT * FROM CLINICA.PACIENTE
--OPERADOR OR - CUMPLE UNA O MAS CONDICIONES
UPDATE CLINICA.PACIENTE SET CIUDAD = 'XALAPA' WHERE sexo='F' OR estado = 'MEXICO';

UPDATE CLINICA.PACIENTE SET CIUDAD = 'XALAPA' WHERE sexo='M' or estado = 'MONTERREY'
--ELIMINAR REGISTROS DE UNA TABLA
SELECT * FROM CLINICA.PACIENTE
--BORRAR TABLA
DELETE FROM CLINICA.PACIENTE
DELETE FROM CLINICA.CITA
DELETE FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
DELETE FROM CLINICA.PACIENTE WHERE pk_idPaciente = 'P-0009'
SELECT * FROM CLINICA.CITA WHERE Fk_idPaciente = 'P-0009'

--CONSULTA ESPECIFICANDO LAS COLUMNAS 

SELECT pk_idPaciente, nombre,apellido FROM CLINICA.PACIENTE;
-- CONSULTAS CON CONDICIONALES
SELECT * FROM CLINICA.PACIENTE WHERE sexo = 'M';
SELECT * FROM CLINICA.PACIENTE WHERE ciudad = 'MEXICO'
SELECT * FROM CLINICA.PACIENTE WHERE ciudad = 'MEXICO' AND sexo = 'M'
SELECT * FROM CLINICA.PACIENTE WHERE ciudad = 'MEXICO' OR sexo = 'M'
SELECT * FROM CLINICA.PACIENTE WHERE ciudad IN ('MONTERREY','GUADALAJARA')

--DONDE NO SEA MONTERREY O GUADALAJARA OSEA NEGACION
SELECT * FROM CLINICA.PACIENTE WHERE ciudad NOT IN ('MONTERREY','GUADALAJARA')
--BUSCAR DONDE APELLIDOS TERMINEN EN UNA Z
SELECT * FROM CLINICA.PACIENTE WHERE apellido LIKE '%Z';
SELECT * FROM CLINICA.PACIENTE WHERE ciudad LIKE 'M%';
SELECT * FROM CLINICA.PACIENTE WHERE apellido LIKE '%A%';

-- BUSCAR REGISTROS DONDE RANGO DE FECGHA ESTE EN ESTOS DOS Y LA CONDICION SE CUMPLA
SELECT * FROM CLINICA.AGENDAR_CITA WHERE (fechaCita BETWEEN '2022-10-01' AND '2022-10-06') AND (turno='MATUTINO')
SELECT * FROM CLINICA.AGENDAR_CITA

--
SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO WHERE edad >='30'

SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
-- TRAER REGISTROS DONDE NO SEAN OBECIDAD
SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO  WHERE nivelPeso <>  'OBESIDAD'
-- SELECIONAR LOS CAMPOS DONDE NIVEL DE PESO NO SEA NORMAL  Y LA EDAD ENTRE ESOS RANGOS
SELECT folio,edad, nivelPeso ,fk_idespecialista,fk_idPaciente,fechacreacion
FROM CLINICA.EXPEDIENTE_DIAGNOSTICO 
WHERE nivelPeso <> 'NORMAL' AND edad BETWEEN '30' AND '40'


--funciones de agregacion promedios
--COUNT 
-- CUANTOS PACIENTES HAY EN LA TABLA
SELECT COUNT(*) FROM CLINICA.PACIENTE

SELECT COUNT(*) cantidad_paciente FROM CLINICA.PACIENTE WHERE ciudad ='MEXICO'
-- AGREGACION
-- SUMAR LOS FOLIOS
SELECT SUM(folio) FROM CLINICA.EXPEDIENTE_DIAGNOSTICO 
--SUMAR LA EDAD DE TODOS LOS PACIENTE CONVIRTIENDO A INTERO
SELECT SUM(CAST (edad AS INT)) AS suma_edad FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
-- FUNCION MAX MIN
SELECT MAX(peso) FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
--MAXIMA EDAD
SELECT MAX(edad) FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
--MIN
SELECT MIN(edad) FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
-- FUNCION AVG PROMEDIO DE DATOS
SELECT AVG(CAST(edad AS INT )) AS promedio_edad FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
SELECT AVG(CAST(peso AS INT )) AS pesoi FROM CLINICA.EXPEDIENTE_DIAGNOSTICO



-- combinar funciones de agregacion
--ESTRAER EDAD MAXIMA , EDAD MINIMA, SUMAR LA EDAD , PROMEDIO DE EDAD
SELECT MAX(edad)  AS edad_maxima, MIN(edad) AS edad_minima, SUM(CAST(edad AS INT)) AS suma_edad,
 AVG(CAST (edad AS INT)) AS edad_promedio, COUNT(*)  AS  cantidad_diagnostico
FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;

-- GROUP BY
--AGRUPAR Y ORDENAR DATOS
SELECT fk_idEspecialista FROM CLINICA.EXPEDIENTE_DIAGNOSTICO GROUP BY fk_idEspecialista;
--AGRUPAR DATOS POR  NIVEL DE PESO
SELECT  COUNT(nivelPeso) AS cantidad_peso , nivelPeso FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
GROUP BY nivelPeso;
-- mostrar paciente y promedio del peso ORDENADO POR PACIENTE ID
SELECT fk_idPaciente , AVG (CAST (peso AS INT)) FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
GROUP BY fk_idPaciente ORDER BY fk_idPaciente DESC
--MOSTRAR FOLIO POR FORMA DESC
SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO ORDER BY folio DESC;
--devuelva registros cuantas citas tienen asignados los especialistas que tengan mas de 1 cita 
SELECT fk_idEspecialista , COUNT(fk_idEspecialista) AS citas_a_realizar
FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
GROUP BY fk_idEspecialista
HAVING COUNT(fk_idEspecialista) > 1;

-- AVG(CAST (peso AS INT)) CONVERTIR PESO A ENTERO 
--TRAER PESO QUE VA HA SER LLAMADO PROMEDIO_PESO sea 80 
SELECT fk_idPaciente , AVG(CAST (peso AS INT))  AS promedio_peso
FROM  CLINICA.EXPEDIENTE_DIAGNOSTICO
GROUP BY fk_idPaciente, peso 
HAVING AVG(CAST(peso AS INT)) < 80

--INSTRUCCION datos no repetidos DISTINCT

SELECT DISTINCT fk_idPaciente
FROM CLINICA.EXPEDIENTE_DIAGNOSTICO ORDER BY fk_idPaciente;

SELECT fk_idPaciente FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
--LIMIT LIMITA CANTIDAD DE REGISTROS
SELECT * FROM CLINICA.PACIENTE lIMIT 1
SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO ORDER BY folio DESC LIMIT 5;

--INNER JOIN unir todos los registros de dos tablas
SELECT * FROM CLINICA.PACIENTE
INNER JOIN CLINICA.EXPEDIENTE
ON PACIENTE.pk_idpaciente = EXPEDIENTE.pk_idPaciente
 
 --inner join DE VARIAS TABLAS RELACIONADAS
SELECT * FROM CLINICA.ESPECIALISTA
INNER JOIN CLINICA.EXPEDIENTE_DIAGNOSTICO
ON ESPECIALISTA.pk_idespecialista = EXPEDIENTE_DIAGNOSTICO.fk_idespecialista
INNER JOIN CLINICA.PACIENTE
ON PACIENTE.pk_idpaciente = EXPEDIENTE_DIAGNOSTICO.Fk_idpaciente





SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
SELECT * FROM CLINICA.ESPECIALISTA
--INNER JOIN unir todos los registros de dos tablas TRAER POR ALGUN TIPO DE DATO
SELECT * FROM CLINICA.PACIENTE
INNER JOIN CLINICA.EXPEDIENTE
ON PACIENTE.pk_idpaciente = EXPEDIENTE.pk_idPaciente
WHERE PACIENTE.pk_idPaciente = 'P-0001'

--LEFT JOIN TRAER LOS DATOS SELECCIONANDO LA TABLA DE LA DERECHA ASI  TENGA DATOS VACIOS
SELECT * FROM CLINICA.PACIENTE
LEFT JOIN CLINICA.EXPEDIENTE
ON  PACIENTE.pk_idpaciente = EXPEDIENTE.pk_idPaciente

--INSERTAR DATO
INSERT INTO CLINICA.PACIENTE VALUES('P-0015','LINA','DIAZ','M','1995-01-05','MEXICO','MEXICO','544445');  


--INNER JOIN RIGHT
SELECT * FROM CLINICA.EXPEDIENTE
RIGHT JOIN CLINICA.PACIENTE
ON  PACIENTE.pk_idpaciente = EXPEDIENTE.pk_idPaciente

--INNNER JOIN ANIDADO COMBINANDO TODOS LOS DATOS 
SELECT * FROM CLINICA.PACIENTE
INNER JOIN CLINICA.CITA
ON PACIENTE.pk_idPaciente = CITA.fk_idPaciente
INNER JOIN CLINICA.AGENDAR_CITA
ON CITA.pk_idCita = AGENDAR_CITA.FK_idCita
INNER JOIN CLINICA.ESPECIALISTA
ON AGENDAR_CITA.fk_idEspecialista = ESPECIALISTA.Pk_idEspecialista
INNER JOIN CLINICA.EXPEDIENTE_DIAGNOSTICO 
ON ESPECIALISTA.pk_idEspecialista = EXPEDIENTE_DIAGNOSTICO.fk_idEspecialista
INNER JOIN CLINICA.EXPEDIENTE
ON EXPEDIENTE_DIAGNOSTICO.fk_idPaciente = EXPEDIENTE.pk_idPaciente;


--INNNER JOIN ANIDADO COMBINANDO TODOS LOS DATOS 

 
SELECT * FROM CLINICA.PACIENTE
INNER JOIN CLINICA.CITA
ON PACIENTE.pk_idPaciente = CITA.fk_idPaciente
INNER JOIN CLINICA.AGENDAR_CITA
ON CITA.pk_idCita = AGENDAR_CITA.FK_idCita
INNER JOIN CLINICA.ESPECIALISTA
ON AGENDAR_CITA.fk_idEspecialista = ESPECIALISTA.Pk_idEspecialista
INNER JOIN CLINICA.EXPEDIENTE_DIAGNOSTICO 
ON ESPECIALISTA.pk_idEspecialista = EXPEDIENTE_DIAGNOSTICO.fk_idEspecialista
INNER JOIN CLINICA.EXPEDIENTE
ON EXPEDIENTE_DIAGNOSTICO.fk_idPaciente = EXPEDIENTE.pk_idPaciente
WHERE PACIENTE.pk_idPaciente = 'P-0001';

--vistas en POTSGRES  ALTERNATIVA PARA MOSTRAR DATOS 

CREATE VIEW CLINICA.PACIENTES_MASCULINOS AS
SELECT * FROM CLINICA.PACIENTE WHERE SEXO = 'M';
--EJECUTAR LA VISTA
SELECT * FROM CLINICA.PACIENTES_MASCULINOS;



--INNNER JOIN ANIDADO COMBINANDO TODOS LOS DATOS 

 PEDIENTE_DIAGNOSTICO 
ON ESPECIALISTA.pk_idEspecialista = EXPEDIENTE_DIAGNOSTICO.fk_idEspecialista
INNER JOIN CLINICA.EXPEDIENTE
ON EXPEDIENTE_DIAGNOSTICO.fk_idPaciente = EXPEDIENTE.pk_idPaciente
WHERE PACIENTE.pk_idPaciente = 'P-0001';


CREATE VIEW CLINICA.PACIENTES_Ciudad AS
SELECT nombre,apellido,ciudad FROM CLINICA.PACIENTE WHERE ciudad = 'MEXICO';
SELECT * FROM CLINICA.PACIENTES_Ciudad
--BORRAR UNA VISTA 
DROP VIEW CLINICA.PACIENTES_MASCULINOS
--RENOMBRAR VISTA
ALTER VIEW CLINICA.PACIENTES_MASCULINOS  RENAME TO OTRO_NOMBRE

SELECT * FROM CLINICA.OTRO_NOMBRE


--SUB CONSULTAS DONDE SE CUMPLA LA CONDICION QUE TENGAN CITAS EN ESE RANGO DE FECHAS 
SELECT * FROM CLINICA.ESPECIALISTA
WHERE pk_idEspecialista IN(SELECT fk_idEspecialista
FROM CLINICA.AGENDAR_CITA
WHERE fechaCita BETWEEN '2022-10-04' AND '2022-10-08')

--SUB CONSULTAS
SELECT * FROM CLINICA.ESPECIALISTA
WHERE pk_idEspecialista NOT IN(SELECT fk_idEspecialista
FROM CLINICA.AGENDAR_CITA
WHERE fechaCita BETWEEN '2022-10-04' AND '2022-10-08')


-- SUBCONSULTA CONSULTA DENTRPO DE OTRA CONSULTA
--MOSTRAR DIAGNOSTICO QUE HAYAN ATENDIDO ESOS DOS ESPECIALISTAS
SELECT * FROM CLINICA.PACIENTE
INNER JOIN CLINICA.EXPEDIENTE_DIAGNOSTICO
ON PACIENTE.pk_idPaciente = EXPEDIENTE_DIAGNOSTICO.fk_idPaciente
WHERE (sexo = 'M')
AND EXPEDIENTE_DIAGNOSTICO.fk_idEspecialista IN (SELECT pk_idEspecialista
												FROM CLINICA.ESPECIALISTA
												WHERE pk_idEspecialista IN('ME-0001','ME-0003'))


--SUBCONSULTA para que cumpla una condicion
SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
WHERE peso IN(SELECT MAX(peso) FROM CLINICA.EXPEDIENTE_DIAGNOSTICO)

--SUBCONSULTA
SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
WHERE peso IN (SELECT MAX(peso) 
			  FROM CLINICA.EXPEDIENTE_DIAGNOSTICO)
OR edad  IN (SELECT MAX(edad)
		FROM CLINICA.EXPEDIENTE_DIAGNOSTICO)
OR altura  IN (SELECT MIN(altura)
		FROM CLINICA.EXPEDIENTE_DIAGNOSTICO)
		
-- subconsulta para poder estraer una columna 
SELECT *, (SELECT tipoSangre FROM CLINICA.EXPEDIENTE WHERE pk_idPaciente = PACIENTE.pk_idPaciente),
 (SELECT padecimientoCro FROM CLINICA.EXPEDIENTE WHERE pk_idPaciente = PACIENTE.pk_idPaciente)
FROM CLINICA.PACIENTE
WHERE pk_idPaciente='P-0001'

--funcion left

SELECT LEFT('HOLA ESTE ES UN MENSAJE', 9) AS MENSAJE;
-- FUNCION DONDE RECIBE DOS PARAMETROS
-- TRAER REGISTROS DONDE NOMBRE EMPIEZA POR LETRA A
SELECT nombre,apellido FROM CLINICA.PACIENTE
WHERE LEFT(nombre, 1) ='A'

--RIGHT
SELECT RIGHT('HOLA ES UN MENSAJE',7) AS MENSAJE
--TRAER RGISTROS DONDE APELLIDO EMPIECE POR Z DE DERECHA A IZQUIERDA
SELECT nombre, apellido FROM CLINICA.PACIENTE
WHERE RIGHT(apellido, 1) ='Z'

SELECT * FROM CLINICA.PACIENTE
--concatenar registros con parametros
SELECT CONCAT ('EL PACIENTE CON ID ', ' ', fk_idPaciente,' ','tiene un peso ',peso,'kg')
FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
--CONCATENACION
SELECT (nombre || '  ' || apellido) AS NOMBRE_COMPLETO FROM CLINICA.PACIENTE

--LENGTH
SELECT LENGTH('HOLA ESTE ES UN MENSAJE');
--CONTAR CANTIDAD DE LETRAS QUE TIENE EL NOMBRE Y APELLLIDO
SELECT CONCAT(nombre, ' ',  apellido) AS NOMBRE_PACIENTE , LENGTH(nombre||''||apellido) AS CANTIDAD_LETRAS
FROM CLINICA.PACIENTE


--REPLACE CARACTER 
SELECT REPLACE('MENSAJX','X','E')
SELECT * FROM CLINICA.EXPEDIENTE
--CAMBIAR EL TIPO DE SANGRE  DE TIPO B A TIPO O DONDE SE CUMPLA LA CONDICION
UPDATE CLINICA.EXPEDIENTE SET tipoSangre = REPLACE (tipoSangre, 'B','O')
WHERE tipoAlergia = 'NA' AND padecimientoCro='NA';

-- FUNCIONES DE FECHA Y HORA
SELECT NOW()  

SELECT CURRENT_TIME
SELECT LEFT(CAST(CURRENT_TIME AS VARCHAR(8)), 8) AS HORA_ACTUAL;

SELECT CURRENT_DATE;
--FECHA DE MAÑANA
SELECT (NOW() + INTERVAL '1 DAY') AS TIEMPO_MAÑANA
--UNA HORA MAS
SELECT (NOW() + INTERVAL '1 HOUR') AS TIEMPO_UNA_HORA_MAAS
-- HORA Y FECHA
SELECT TIMEOFDAY()
-- FECHA Y HORA SIN MOSTRAR MILISEGUNDOS
SELECT LEFT(CAST( TIMEOFDAY() AS VARCHAR(16)), 16) AS DIA_FECHA;
--DATE PART
--DIFERENCIA DE AÑO 
SELECT DATE_PART('year','2012-01-01'::date)- DATE_PART('year','2015-01-01'::date) as DIFERENCIA_AÑO
--DIFERENCIA DE MES
SELECT DATE_PART('month','2012-01-01'::date)- DATE_PART('month','2015-08-01'::date) as DIFERENCIA_MES
-- DIFERENCIA DE DOS FECHAS EN DIAS 
SELECT DATE_PART('day','2011-10-10'::date)- DATE_PART('day', '2011-10-01'::date) AS DIFERENCIA_DIA

--DIFERENCIA EN HORAS
SELECT DATE_PART('hour','2011-10-10 15:00'::timestamp)- DATE_PART('hour', '2011-10-01 09:09'::timestamp) AS DIFERENCIA_HORAS


--DIFERENCIA DE MNINUTOS
SELECT DATE_PART('min','2011-12-30 15:40'::timestamp)- DATE_PART('min', '2011-12-20 15:00'::timestamp) AS DIFERENCIA_MINUTOS


-- TRAER REGISTROS DONDE NOMBRE EMPIEZA POR LETRA A
--TRAER RGISTROS DONDE APELLIDO EMPIECE POR Z DE DERECHA A IZQUIERDA
SELECT nombre,apellido FROM CLINICA.PACIENTE
WHERE LEFT(nombre, 1) ='A'
AND
RIGHT(apellido, 1) ='A'
OR
RIGHT(apellido, 1) ='z'
 ORDER BY pk_idPaciente DESC;



 ----------------EJERCICIOS PRACTICA -----------------




--1.- SELECCIONAR LOS PACIENTE CUYOS NOMBRES TERMINEN CON UNA A O QUE SUS APELLIDOS TERMINEN CON UNA Z
--ORDENARLOS POR SU ID DE FORMA DESCENDENTE.

SELECT * FROM CLINICA.PACIENTE
WHERE nombre LIKE '%A' OR apellido LIKE '%Z'
ORDER BY pk_idPaciente;

--2.- CONTAR LOS ESPECIALISTAS Y AGRUPARLOS POR SU ESPECIALIDAD
--RENOMBRAR COLUMNA EN CASO QUE SEA NECESARIO

SELECT COUNT(pk_idEspecialista) AS cantidad_especialistas, especialidad FROM CLINICA.ESPECIALISTA
GROUP BY especialidad;

--3.- SELECCIONAR LOS EXPEDIENTES DIAGNOSTICOS CUYO peso sea mayor a 50 o la edad mayor a 30

SELECT fk_idPaciente, edad, peso, altura FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
WHERE (peso < '50' OR edad > '30')

--4.- SELECCIONAR LAS LLAVES FORANEAS DE PACIENTE Y ESPECIALISTA UTILIZANDO LA INSTRUCCION DISTINCT DE LA TABLA DE EXPEDIENTE DIAGNOSTICO

SELECT DISTINCT (fk_idPaciente, fk_idEspecialista)  
FROM CLINICA.EXPEDIENTE_DIAGNOSTICO;

--5.- SELECCIONAR LAS COLUMNAS DE FOLIO, ID DE PACIENTE, ID DE ESPECIALISTA Y FECHA DE CREACION 
--LOS DIAGNOSTICOS DE LOS PACIENTE QUE TENGAN UNA EDAD MAYOR A 25 Y SU NIVEL DE PESO NO SEA NORMAL,
--ADEMÁS QUE SU FECHA DE DIAGNOSTICO SEA MAYOR A FEBREO DEL 2021, ORDENARLOS POR EL ID DE ESPECIALISTA. 

SELECT folio, fk_idPaciente, fk_idEspecialista, fechaCreacion FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
WHERE nivelPeso NOT IN ('NORMAL') AND edad > '25' AND fechaCreacion > '2021-02-01'
GROUP BY folio
ORDER BY fk_idEspecialista;

--6.- SELECCIONAR LOS ESPECIALISTAS QUE HAYAN HECHO DIAGNOSTICOS CUYO NIVEL DE PESO SEA SOBREPESO.

SELECT * FROM CLINICA.ESPECIALISTA
WHERE pk_idEspecialista IN (SELECT fk_idEspecialista
							FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
							WHERE nivelPeso IN ('SOBREPESO'));


--7.- SELECCIONAR CUÁNTOS DIAGNOSTICOS TIENEN CADA PACIENTE INGRESADO Y AGRUPARLOS POR SU ID, ORDENARLO LA CANTIDAD DE CITAS DE MAYOR A MENOR

SELECT fk_idPaciente, COUNT(fk_idPaciente) AS cantidad_citas
FROM CLINICA.EXPEDIENTE_DIAGNOSTICO 
GROUP BY fk_idPaciente ORDER BY COUNT(fk_idPaciente) DESC;


--8.- SELECCIONA LOS EXPEDIENTES DE LOS PACIENTES QUE TENGAN NIVELES DE PESO EN NORMAL Y SOBREPESO, 
ADEMÁS QUE LOS HAYAN ATENDIDO LOS ESPECIALISTA CUYA ESPECIALIDAD NO SEA DE MEDICO GENERAL

SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO 
WHERE nivelPeso IN('NORMAL','SOBREPESO') 
AND fk_idEspecialista IN (SELECT pk_idEspecialista FROM CLINICA.ESPECIALISTA
						 WHERE especialidad NOT IN ('MEDICO GENERAL'))


--9.- SELECCIONAR LOS PACIENTES QUE VIVAN EN LA CIUDAD DE MEXICO Y QUE HALLAN NACIDE DEPUES DE 1990, 
--ADEMÁS QUE NO TENGAN ALERGÍAS O PADECIMIENTOS CRONICOS
--POR ÚLTIMO QUE HALLAN RECIBIDO DIAGNOSTICOS DE LOS ESPECIALISTAS CUYOS ID SEAN: ME-0001, ME-0002 Y ME-0003 

SELECT * FROM CLINICA.PACIENTE 
WHERE ciudad = 'MEXICO' AND fechaNacimiento <= '1990-01-01' 
AND pk_idPaciente IN (SELECT pk_idPaciente FROM CLINICA.EXPEDIENTE
					  WHERE tipoAlergia = 'NA' OR padecimientoCro = 'NA')
AND pk_idPaciente IN (SELECT fk_idPaciente FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
					  WHERE fk_idEspecialista IN('ME-0001', 'ME-0002', 'ME-0003'));	


--10.- SELECCIONAR MEDIANTE UN INNER JOIN ANIDADO LAS TABLAS DE PACIENTE, CITA, AGENDAR_CITA Y ESPECIALISTA
--ADEMÁS REALIZAR DENTRO DEL JOIN UNA SUBCONSULTA PARA SABER LOS DIAGNOSTICOS DE LOS PACIENTES
--QUE TENGAN UN PESO MAYOR A 70 O UNA EDAD MAYOR A 20

SELECT * FROM CLINICA.PACIENTE
INNER JOIN CLINICA.CITA
ON PACIENTE.pk_idPaciente = CITA.fk_idPaciente
INNER JOIN CLINICA.AGENDAR_CITA
ON CITA.pk_idCita = AGENDAR_CITA.fk_idCita
INNER JOIN CLINICA.ESPECIALISTA
ON AGENDAR_CITA.fk_idEspecialista = ESPECIALISTA.pk_idEspecialista
WHERE PACIENTE.pk_idPaciente IN (SELECT pk_idPaciente 
								 FROM CLINICA.EXPEDIENTE_DIAGNOSTICO
								 WHERE peso >  '70' OR edad > '20');


--11.- SELECCIONAR LOS DIAGNOSTICOS, ADEMÁS EXTRAER LOS PACIENTES QUE SEAN DE SEXO MASCULINO,
--POR ÚLTIMO EXTRAER LAS COLUMNAS DE NOMBRE, APELLIDO Y ESPECIALIDAD DE LA TABLA DE ESPECIALISTA

SELECT *,(SELECT nombre FROM CLINICA.ESPECIAlISTA WHERE pk_idEspecialista = EXPEDIENTE_DIAGNOSTICO.fk_idEspecialista),
(SELECT apellido FROM CLINICA.ESPECIAlISTA WHERE pk_idEspecialista = EXPEDIENTE_DIAGNOSTICO.fk_idEspecialista),
(SELECT especialidad FROM CLINICA.ESPECIAlISTA WHERE pk_idEspecialista = EXPEDIENTE_DIAGNOSTICO.fk_idEspecialista)
FROM CLINICA.EXPEDIENTE_DIAGNOSTICO 
WHERE fk_idPaciente IN (SELECT pk_idPaciente FROM CLINICA.PACIENTE
					   WHERE sexo = 'M')

--12.-MEDIANTE UN INNER JOIN SELECCIONAR LAS TABLAS DE PACIENTE CITA Y AGENDAR CITA, EN DONDE LA FECHA DE CITA ESTE ENTRE DOS FECHAS
--ADEMÁS QUE LAS CIUDADES DE LOS PACIENTES SEAN MEXICO O MONTERREY, POR ULTIMO QUE EL TIPO DE SANGRE DE LOS PACIENTES SEA O POSITIVO

SELECT * FROM CLINICA.PACIENTE
INNER JOIN CLINICA.CITA
ON PACIENTE.pk_idPaciente = CITA.fk_idPaciente
INNER JOIN CLINICA.AGENDAR_CITA
ON CITA.pk_idCita = AGENDAR_CITA.fk_idCita
WHERE AGENDAR_CITA.fechaCita BETWEEN '2022-10-04' AND '2022-10-08'
AND PACIENTE.ciudad IN('MEXICO', 'MOTERREY')
AND PACIENTE.pk_idPaciente IN (SELECT pk_idPaciente FROM CLINICA.EXPEDIENTE
							  WHERE tipoSangre ='O POSITIVO')
								 
								 

--TRANSACCIONES 
-- FORMA SEGURA DE EJECUTAR CONSULTAS    

SELECT * FROM CLINICA.PACIENTE




----ROLES Y PERMISOS-----------------------------------
--------------------------------------------------
-------------------------------------------------------
--------------------
---------
----
--


--DBA 
--CREAR ROLE DBA
--ROL QUE TITNE TODOS LOS PERMISOS EN TODAS LAS TABLAS 
CREATE ROLE dba WITH SUPERUSER;
--LE DAMOS PERMISO DE UTILIZAR EL ESQUEMA 
GRANT USAGE ON SCHEMA CLINICA TO dba;
--DAMOS TODOS LOS PERMISOS PARA EL ROL DBA
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA CLINICA TO dba WITH GRANT OPTION;

GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA CLINICA TO dba WITH GRANT OPTION; 

CREATE USER administrador WITH PASSWORD '12345' IN ROLE dba;


DROP USER administrador;

REVOKE  ALL PRIVILEGES ON ALL TABLES IN SCHEMA CLINICA FROM dba;

REVOKE ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA CLINICA FROM dba; 

REVOKE USAGE ON SCHEMA CLINICA FROM dba;

DROP ROLE dba;

--JEFE_ESPECIALISTA
--CREAR ROLE DE JEFE_ESPECIALISTA
CREATE ROLE jefe_especialista;

GRANT USAGE ON SCHEMA CLINICA TO jefe_especialista;

GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA CLINICA TO jefe_especialista WITH GRANT OPTION; 
--CREAR ESOS PERMISOS PARA JEFE ESPECIALISTA
GRANT SELECT, INSERT, UPDATE 
ON CLINICA.EXPEDIENTE, CLINICA.EXPEDIENTE_DIAGNOSTICO, CLINICA.ESPECIALISTA
TO jefe_especialista WITH GRANT OPTION;

GRANT DELETE ON CLINICA.ESPECIALISTA 
TO jefe_especialista WITH GRANT OPTION;
--CREAR JEFE ESPECIALISTA  SOLO UNA CONECCION EN ESTE ROL 
CREATE USER jefe_especialista_1 WITH PASSWORD '12345' CONNECTION LIMIT 1 IN ROLE jefe_especialista;


DROP ROLE jefe_especialista;

REVOKE USAGE ON SCHEMA CLINICA FROM jefe_especialista;

REVOKE ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA CLINICA FROM dba; 

REVOKE INSERT, SELECT, UPDATE ON CLINICA.EXPEDIENTE, CLINICA.EXPEDIENTE_DIAGNOSTICO, CLINICA.ESPECIALISTA
FROM jefe_especialista;

REVOKE DELETE ON CLINICA.ESPECIALISTA
FROM jefe_especialista;

DROP USER jefe_especialista_1;

--ESPECIALISTA
--CREAR ROLE DE ESPECIALISTA
CREATE ROLE especialista;

GRANT USAGE ON SCHEMA CLINICA TO especialista;

GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA CLINICA TO especialista WITH GRANT OPTION; 
--DAR PERMISOS AL ROL ESPECIALISTA 
GRANT SELECT, INSERT, UPDATE 
ON CLINICA.EXPEDIENTE, CLINICA.EXPEDIENTE_DIAGNOSTICO
TO especialista WITH GRANT OPTION;
--CREAR LOS USUARIOS 
CREATE USER especialista_1 WITH PASSWORD '12345' CONNECTION LIMIT 1 IN ROLE especialista;
CREATE USER especialista_2 WITH PASSWORD '12345' CONNECTION LIMIT 1 IN ROLE especialista;
CREATE USER especialista_3 WITH PASSWORD '12345' CONNECTION LIMIT 1 IN ROLE especialista;


DROP ROLE especialista;

REVOKE USAGE ON SCHEMA CLINICA FROM especialista;

REVOKE ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA CLINICA FROM especialista; 

REVOKE SELECT, INSERT, UPDATE ON CLINICA.EXPEDIENTE, CLINICA.EXPEDIENTE_DIAGNOSTICO
FROM especialista;

DROP USER especialista_1;
DROP USER especialista_2;
DROP USER especialista_3;


--RECEPCIONISTA
--CREAR ROLE DE RECEPCIONISTA
CREATE ROLE recepcionista;

GRANT USAGE ON SCHEMA CLINICA TO recepcionista;

GRANT SELECT, INSERT, UPDATE 
ON CLINICA.PACIENTE, CLINICA.CITA, CLINICA.AGENDAR_CITA
TO recepcionista WITH GRANT OPTION;
--PERMISOS DE BORRAR SOBRE EL PACIENTE
GRANT DELETE ON CLINICA.PACIENTE TO recepcionista WITH GRANT OPTION;

GRANT INSERT ON CLINICA.DATOS_PACIENTES_PERSONAL TO recepcionista WITH GRANT OPTION;

GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA CLINICA TO recepcionista WITH GRANT OPTION;

CREATE USER recepcionista_1 WITH PASSWORD '12345' CONNECTION LIMIT 1 IN ROLE recepcionista;
CREATE USER recepcionista_2 WITH PASSWORD '12345' CONNECTION LIMIT 1 IN ROLE recepcionista;
CREATE USER recepcionista_3 WITH PASSWORD '12345' CONNECTION LIMIT 1 IN ROLE recepcionista;


DROP ROLE recepcionista;
--BORRAR PERMISO ESQUEMA CLINICA  DE RECEPCIONSITA 
REVOKE USAGE ON SCHEMA CLINICA FROM recepcionista;
--BORRAR PERMISOS O REVOCAR 
REVOKE SELECT, INSERT, UPDATE ON CLINICA.PACIENTE, CLINICA.CITA, CLINICA.AGENDAR_CITA
FROM recepcionista;
--
REVOKE DELETE ON CLINICA.PACIENTE FROM recepcionista;

REVOKE INSERT ON CLINICA.DATOS_PACIENTES_PERSONAL FROM recepcionista;

REVOKE ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA CLINICA FROM recepcionista;

--BORRAR USUARIOS 
DROP USER recepcionista_1;
DROP USER recepcionista_2;
DROP USER recepcionista_3;


-----------------PL---------------------
----------PGSQL--------------------
CREATE FUNCTION CLINICA.HolaMundo() RETURNS VARCHAR(20) AS $$
DECLARE 
mensaje VARCHAR(20):= 'HOLA MUNDO';
BEGIN 
RETURN mensaje;
END 
$$ LANGUAGE plpgsql;

 
SELECT CLINICA.HolaMundo()

CREATE FUNCTION CLINICA.Mundo(mensaje VARCHAR(20)) RETURNS VARCHAR(20) AS $$
BEGIN 
RETURN mensaje;
END 
$$ LANGUAGE plpgsql;
SELECT CLINICA.Mundo('HOLA EN BOGOTA EN POSTGRESQL')

--SUMAR DOS NUMEROS Y MULTIPLICAR 
CREATE OR REPLACE FUNCTION CLINICA.SumarNumeros(numero1 INT, numero2 INT, numero3 INT)
RETURNS INT AS $$
BEGIN
RETURN numero1 + numero2 * 2;
END
$$ LANGUAGE plpgsql;

SELECT CLINICA.SumarNumeros(2,42)



--CONDICONAL IF ELSE
CREATE OR REPLACE FUNCTION CLINICA.NumeroMayorMenor(numero1 INT, numero2 INT)
RETURNS VARCHAR(30) AS $$
BEGIN
IF numero1 > numero2 THEN
             RETURN 'el numero' || numero1 ||' es mayor que el numero :'|| numero2;
      ELSEIF numero1 < numero2 THEN
                   RETURN  'el numero' || numero2 ||' es mayor que el numero :'	|| numero1;
ELSE
                  RETURN    'el numero' || numero2 ||' es IGUAL QUE EL NUMERI :'	|| numero1;
				  END IF;
END;
$$ LANGUAGE plpgsql;


SELECT CLINICA.NumeroMayorMenor(4,4)


----CASE WHEN-----
CREATE OR REPLACE FUNCTION CLINICA.MesAño(numeroMes INT)
RETURNS VARCHAR(30) AS $$
DECLARE
mensaje VARCHAR(20) := 'EL NUMERO DEL MES :';
BEGIN 
CASE
WHEN numeroMes = 1 THEN
RETURN mensaje || 'Enero';
WHEN numeroMes = 2 THEN
RETURN mensaje || 'Febrero';
WHEN numeroMes =  3 THEN
RETURN mensaje || 'marzo';
WHEN numeroMes = 4 THEN
RETURN mensaje || 'abril';
ELSE 
RETURN  ' EL NUMERO NO CORRESPONDE AL MES ';
 END CASE;
 END ;
 $$ LANGUAGE plpgsql;


--mostrar validacion del numero que mes es
SELECT CLINICA.MesAño(2)

--FOR LOOP
--ciclo repetitivo igual al foreach

CREATE OR REPLACE FUNCTION CLINICA.Loop(numero INT)
RETURNS INT AS $$
DECLARE
I INT :=0;
BEGIN
FOR I IN 1..numero LOOp
RAISE NOTICE 'CONTADOR %',i;
END LOOP;
END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.Loop(5);



--FOR LOOP
--ciclo repetitivo igual al foreach en reverse 

CREATE OR REPLACE FUNCTION CLINICA.LoopiNVERSA(numero INT)
RETURNS INT AS $$
DECLARE
I INT :=0;
BEGIN
FOR I IN  REVERSE numero..1 LOOp
RAISE NOTICE 'CONTADOR %', i;
END LOOP;
END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.LoopiNVERSA(5);



CREATE OR REPLACE FUNCTION CLINICA.Loopcada2(numero INT)
RETURNS INT AS $$
DECLARE
I INT :=0;
BEGIN
FOR I IN 0..numero BY 2 LOOp
RAISE NOTICE 'CONTADOR %',i;
END LOOP;
END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.Loopcada2(10);


-------WHILE
-------------------------
--------------
----------------------

CREATE OR REPLACE FUNCTION CLINICA.while(numero INT)
RETURNS INT AS $$
DECLARE 
    i INT := 0;
BEGIN  
WHILE i < numero LOOP
RAISE NOTICE 'CONTADOR %', i;
i = i + 1;
END LOOP; 

END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.while(5);


--numeros paress
CREATE OR REPLACE FUNCTION CLINICA.whileNumerosPares(numero INT)
RETURNS INT AS $$
DECLARE 
    i INT := 0;
BEGIN  
WHILE i < numero LOOP
IF (I%2) = 0 THEN
RAISE NOTICE 'CONTADOR %', i;
END IF;
i = i + 1;
END LOOP; 

END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.whileNumerosPares(20);


---NUMEROS IMPARES
--numeros paress
CREATE OR REPLACE FUNCTION CLINICA.whileNumerosINPares(numero INT)
RETURNS INT AS $$
DECLARE 
    i INT := 0;
BEGIN  
WHILE i < numero LOOP
IF (I%2) <> 0 THEN
RAISE NOTICE 'CONTADOR %', i;
END IF;
i = i + 1;
END LOOP; 

END;
$$ LANGUAGE plpgsql;

SELECT CLINICA.whileNumerosINPares(20);



--
--PROCEDURE
--------------------
CREATE OR REPLACE PROCEDURE CLINICA.InsertarPacienteExpediente
(nombre VARCHAR(20), apellido VARCHAR(20), sexo CHAR(1), fechaNacimiento DATE, 
	ciudad VARCHAR(30), estado VARCHAR(30), telefono CHAR(10), tipoSangre VARCHAR(10),
		tipoAlergia VARCHAR(30), padecimientoCro VARCHAR(30)) 
LANGUAGE plpgsql
AS $$
DECLARE
	idPaciente CHAR(6);
	idPacienteAux CHAR(4);
	-- SE HACE UN CASTEO PARA MOSTRAR SOLO 19 CARACTERES DE LA CADENA
	fechaCreacion TIMESTAMP:= (SELECT LEFT(CAST (CURRENT_TIMESTAMP AS CHAR(30)), 19 ));
BEGIN
	-- SI NO EXISTE  EL PRIMER ID SE LE VA A ASIGNAR ESE ID   'P-0001' 
	IF NOT EXISTS (SELECT pk_idPaciente FROM CLINICA.PACIENTE WHERE pk_idPaciente = 'P-0001' ) THEN
		idPaciente = 'P-0001';
	ELSE
	-- EJECUTAR PARA MOSTRAR EL ULTIMO ID 
		idPaciente := (SELECT pk_idPaciente FROM CLINICA.PACIENTE ORDER BY pk_idPaciente DESC LIMIT 1);
		--SE EXTRAE LOS 3 ULTIMOS DIGITOS 
		idPacienteAux := (SELECT SUBSTRING(idPaciente, 3, 6));
		-- SE HACE CASTEO PARA PASARLO A NUMEROI ENTERO Y SE LE LE SUMA OTRO MAS
		idPacienteAux := CAST(idPacienteAux AS INT)+1;
		--SI ES MENOR A9 VA A TENER P-00
		IF idPacienteAux < '9' THEN
			idPaciente = 'P-00' || idPacienteAux;
			--SI ESTA ENTRE EL 10 AL 99
		ELSEIF idPacienteAux BETWEEN '10' AND '99' THEN
			idPaciente = 'P-0' ||  idPacienteAux;
		ELSEIF idPacienteAux BETWEEN '100' AND '999' THEN
		--SI ES DEL 100 AL 999 SE COLOCA SI P-
			idPaciente = 'P-' ||  idPacienteAux;	
		END IF;
	END IF;
	-- SE HACE INSERT DE LOS DATOS 
	INSERT INTO CLINICA.PACIENTE 
	VALUES (idPaciente, nombre, apellido, sexo, fechanacimiento, ciudad, estado, telefono );
	--SE INSERTAN DATOS DEL EXPEDIENTE
	INSERT INTO CLINICA.EXPEDIENTE
	VALUES (idPaciente, tipoSangre, tipoAlergia, padecimientoCro, fechaCreacion);
--MESANJE QUE DEVUELTE
	RAISE NOTICE 'PACIENTE Y EXPEDIENTE INGRESADO CORRECTAMENTE';
END; $$



---INSERTAR EN EL PROCEDIMIENTO

CALL CLINICA.InsertarPacienteExpediente
('DANIELFF', 'CARMFFONA', 'M', '1999-01-01', 'MEXICO', 'MEXICO', '5555552', 'O POSITIVO', 'NA', 'NA' );

SELECT * FROM CLINICA.PACIENTE;
SELECT * FROM CLINICA.EXPEDIENTE;
SELECT * FROM CLINICA.ESPECIALISTA;


---INSERTAR EXPECIALISTA
-----------------EN PROCEDIMIENTO ALMACENAD0 
--CALCULANDO EL ID AUTOMATICO
CREATE OR REPLACE PROCEDURE CLINICA.InsertarEspecialista
(nombre VARCHAR(20), apellido VARCHAR(20), sexo CHAR(1), fechaNacimiento DATE, especialidad VARCHAR(30)) 
LANGUAGE plpgsql
AS $$
DECLARE
	idEspecialista CHAR(7);
	idEspecialistaAux CHAR(4);
BEGIN
	
	IF NOT EXISTS (SELECT pk_idEspecialista FROM CLINICA.ESPECIALISTA WHERE pk_idEspecialista = 'ME-0001' ) THEN
		idEspecialista = 'ME-0001';
	ELSE
		idEspecialista := (SELECT pk_idEspecialista FROM CLINICA.ESPECIALISTA ORDER BY pk_idEspecialista DESC LIMIT 1);
		idEspecialistaAux := (SELECT SUBSTRING(idEspecialista, 4, 7));
		idEspecialistaAux := CAST(idEspecialistaAux AS INT)+1;
		-- SI  idEspecialistaAux ES MENOR QUE  9 THEN ES ENTONCES 
		IF idEspecialistaAux < '9' THEN
			idEspecialista = 'ME-000' || idEspecialistaAux;
		ELSEIF idEspecialistaAux BETWEEN '10' AND '99' THEN
			idEspecialista = 'ME-00' ||  idEspecialistaAux;
		ELSEIF idEspecialistaAux BETWEEN '100' AND '999' THEN
			idEspecialista = 'ME-0' ||  idEspecialistaAux;	
		END IF;
	END IF;
	
	INSERT INTO CLINICA.ESPECIALISTA
	VALUES (idEspecialista, nombre, apellido, sexo, fechanacimiento, especialidad);

	RAISE NOTICE 'ESPECIALISTA INGRESADO CORRECTAMENTE';
END; $$

CALL CLINICA.InsertarEspecialista('JORGE', 'EJEMPLO', 'M', '2000-01-01', 'MEDICO GENERAL');

SELECT * FROM CLINICA.ESPECIALISTA;

DELETE FROM CLINICA.ESPECIALISTA WHERE pk_idEspecialista = 'ME-0006';


-------------------------
----------------
----------------INSERTAR AGENDA CITA MEDICA

CREATE OR REPLACE PROCEDURE CLINICA.InsertarCitaAgendarCita
(idPaciente CLINICA.ID_PACIENTE, idEspecialista CLINICA.ID_MEESPECIALISTA, consultorio VARCHAR(20),
	fechaCita DATE, horaCita TIME, observaciones VARCHAR(100)) 
LANGUAGE plpgsql
AS $$
DECLARE
	idCita CHAR(7);
	idCitaAux CHAR(4);
	fechaActual DATE := (SELECT CURRENT_DATE);
	horaActual TIME := (SELECT CURRENT_TIME);
	Turno VARCHAR(10);
BEGIN
	
	IF NOT EXISTS (SELECT pk_idCita FROM CLINICA.CITA WHERE pk_idCita = 'CM-0001' ) THEN
		idCita = 'CM-0001';
	ELSE
		idCita := (SELECT pk_idCita FROM CLINICA.CITA ORDER BY pk_idCita DESC LIMIT 1);
		idCitaAux := (SELECT SUBSTRING(idCita, 4, 7));
		idCitaAux := CAST(idCitaAux AS INT)+1;
		
		IF idCitaAux < '9' THEN
			idCita = 'CM-00' || idCitaAux;
		ELSEIF idCitaAux BETWEEN '10' AND '99' THEN
			idCita = 'CM-0' ||  idCitaAux;
		ELSEIF idCitaAux BETWEEN '100' AND '999' THEN
			idCita = 'CM-' ||  idCitaAux;	
		END IF;
	END IF;

	IF horaActual >= '12:00' THEN
		turno = 'VESPERTINO';
	ELSE 
		turno = 'MATUTINO';
	END IF;
	
	IF fechaCita < fechaActual THEN
		 
		RAISE NOTICE 'NO SE PUEDEN HACER CITAS EN FECHAS ANTERIORES - CITA NO INGRESADA';
	ELSE
		INSERT INTO CLINICA.CITA VALUES (idCita, idPaciente, fechaActual, horaActual);

		INSERT INTO CLINICA.AGENDAR_CITA VALUES
		(idCita, idEspecialista, consultorio, fechaCita, horaCita, turno, 'ESPERA', observaciones);

		RAISE NOTICE 'CITA INGRESADA CORRECTAMENTE';
	END IF;
END; $$

CALL CLINICA.InsertarCitaAgendarCita('P-0001', 'ME-0001', 'CONSULTORIO 1', '2022-01-01', '12:00', 'NA');


SELECT * FROM CLINICA.CITA;

SELECT * FROM CLINICA.AGENDAR_CITA;


------------------------------
--------------------------
-------------------------------------
---------------------------------------------
---------------------------------------------------
--------------------------------------------------------DIAGNOSTICO AUTOMATIZAR  INSERTAR DIAGNOSTICO


CREATE OR REPLACE PROCEDURE CLINICA.InsertarDiagnostico
(fk_idEspecialista CLINICA.ID_MEESPECIALISTA, fk_idPaciente CLINICA.ID_PACIENTE, edad CHAR(2), peso CHAR(3),
	altura CHAR(3), presionArterial CHAR(6), diagnostico VARCHAR(100), recetario VARCHAR(100)) 
LANGUAGE plpgsql
AS $$
DECLARE
	imc REAL;
	pesoNum INT;
	alturaNum REAL;
	nivelPeso CHAR(10);
	fechaCreacion TIMESTAMP := (SELECT LEFT(CAST (CURRENT_TIMESTAMP AS CHAR(30)), 19 ));
BEGIN
	pesoNum := peso;
	alturaNum := altura;
	imc := pesoNum / (alturaNum*alturaNum);
	imc := CAST (imc AS CHAR(5));
	
	IF imc < '18.5' THEN
		nivelPeso := 'BAJO';
	ELSEIF imc BETWEEN '18.5' AND '24.9' THEN
		nivelPeso := 'NORMAL';
	ELSEIF imc BETWEEN '25.0' AND '29.9' THEN
		nivelPeso := 'SOBREPESO';
	ELSE
		nivelPeso := 'OBESIDAD';
	END IF;
	
	INSERT INTO CLINICA.EXPEDIENTE_DIAGNOSTICO(
	fk_idespecialista, fk_idpaciente, edad, peso, altura, imc, nivelpeso, presionarterial, 
		diagnostico, recetario, fechacreacion)
	VALUES (fk_idEspecialista, fk_idPaciente, edad, peso, altura, imc, nivelPeso, 
			presionArterial, diagnostico, recetario, fechaCreacion);
	--MOSTRAR MENSAJE
	RAISE NOTICE 'EXPEDIENTE DIAGNOSTICO INSERTADO';
END; $$




CALL CLINICA.InsertarDiagnostico
('ME-0001','P-0001','20','80','1.75','120/70','NA','NA');


SELECT * FROM CLINICA.EXPEDIENTE_DIAGNOSTICO



--------------------------CITA CANCELADA--------
CREATE OR REPLACE PROCEDURE CLINICA.CitaStatusCancelada(idCita CLINICA.ID_CITA)
LANGUAGE  plpgsql 
AS $$
DECLARE
	status CHAR(10) := (SELECT status FROM CLINICA.AGENDAR_CITA WHERE fk_idCita = idCita);
BEGIN
	IF NOT EXISTS (SELECT pk_idCita FROM CLINICA.CITA WHERE pk_idCita = idCita) THEN
		RAISE NOTICE 'EL ID DE CITA NO EXISTE DENTRO DE LA BASE DE DATOS';
	ELSEIF status = 'REALIZADA' THEN
		RAISE NOTICE 'LA CITA YA HA SIDO REALIZADA';
	ELSE
		UPDATE CLINICA.AGENDAR_CITA SET status = 'CANCELADA' 
		WHERE fk_idCita = idCita;
		RAISE NOTICE 'CITA CANCELADA CORRECTAMENTE';
	END IF;
END; $$

CALL CLINICA.CitaStatusCancelada('CM-0010');

SELECT * FROM CLINICA.AGENDAR_CITA;
SELECT * FROM CLINICA.CITA



------------
-----------------
---------------------------
---------------------------------
---------------------------------------------pasar cita a   realizada
-----------------------------------------------------
CREATE OR REPLACE PROCEDURE CLINICA.CitaStatusRealizada(idCita CLINICA.ID_CITA)
LANGUAGE  plpgsql 
AS $$
DECLARE
	status CHAR(10):= (SELECT status FROM CLINICA.AGENDAR_CITA WHERE fk_idCita = idCita);
BEGIN
	IF NOT EXISTS (SELECT pk_idCita FROM CLINICA.CITA WHERE pk_idCita = idCita) THEN
		RAISE NOTICE 'EL ID DE CITA NO EXISTE DENTRO DE LA BASE DE DATOS';
	ELSEIF status = 'CANCELADA' THEN
		RAISE NOTICE 'LA CITA YA HA SIDO CANCELADA ANTERIORMENTE';
	ELSE
		UPDATE CLINICA.AGENDAR_CITA SET status = 'CANCELADA' 
		WHERE fk_idCita = idCita;
		RAISE NOTICE 'CITA REALIZADA CORRECTAMENTE';
	END IF;
END; $$


CALL CLINICA.CitaStatusRealizada('CM-0008');

SELECT * FROM CLINICA.AGENDAR_CITA;



------------------------------------------------
------------------------------------------------------crear 
--------------------trigger para guardar cuando se borre algo se almacene en esa tabla
CREATE TABLE CLINICA.DATOS_PACIENTES_PERSONAL(
	FOLIO SERIAL,
	tipoMovimiento VARCHAR(20),
	idPaciente CLINICA.ID_PACIENTE,
	nombrePaciente VARCHAR(20),
	apellidoPaciente VARCHAR(20),
	usuario VARCHAR(20),
	fecha TIMESTAMP
);

CREATE OR REPLACE FUNCTION CLINICA.BorradoPaciente() RETURNS TRIGGER 
AS
$$
DECLARE
-- selecciona que usuario esta activo actualmente  (SELECT current_user);
	usuario VARCHAR(20) := (SELECT current_user);
	fechaActual TIMESTAMP := (SELECT LEFT(CAST (CURRENT_TIMESTAMP AS CHAR(30)), 19 ));
BEGIN
	INSERT INTO CLINICA.DATOS_PACIENTES_PERSONAL 
	(tipoMovimiento, idPaciente, nombrePaciente, apellidoPaciente, usuario, fecha) VALUES
	('BORRADO', OLD.pk_idPaciente, OLD.nombre ,OLD.apellido, usuario, fechaActual);
RETURN NEW;
END
$$
LANGUAGE PLPGSQL;

-- se crea trigger despues de un borrado de un paciente
----
CREATE OR REPLACE TRIGGER Borrado_Paciente AFTER DELETE ON CLINICA.PACIENTE
FOR EACH ROW
EXECUTE PROCEDURE CLINICA.BorradoPaciente();

--****

CREATE OR REPLACE FUNCTION CLINICA.ActualizadoPaciente() RETURNS TRIGGER 
AS
$$
DECLARE
	usuario VARCHAR(20) := (SELECT current_user);
	fechaActual TIMESTAMP := (SELECT LEFT(CAST (CURRENT_TIMESTAMP AS CHAR(30)), 19 ));
BEGIN
	INSERT INTO CLINICA.DATOS_PACIENTES_PERSONAL 
	(tipoMovimiento, idPaciente, nombrePaciente, apellidoPaciente, usuario, fecha) VALUES
	('ACTUALIZACIÓN', OLD.pk_idPaciente, OLD.nombre ,OLD.apellido, usuario, fechaActual);
RETURN NEW;
END
$$
LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER Actualizado_Paciente AFTER UPDATE ON CLINICA.PACIENTE
FOR EACH ROW
EXECUTE PROCEDURE CLINICA.ActualizadoPaciente();


CALL CLINICA.InsertarPacienteExpediente
('DANIEL', 'CARMONA', 'M', '1999-01-01', 'MEXICO', 'MEXICO', '55400000', 'O POSITIVO', 'NA', 'NA' );

DELETE FROM CLINICA.PACIENTE WHERE pk_idPaciente = 'P-0002';

UPDATE CLINICA.PACIENTE SET ciudad = 'MONTERREY' WHERE pk_idPaciente = 'P-0014';

SELECT * FROM CLINICA.PACIENTE;

SELECT * FROM CLINICA.DATOS_PACIENTES_PERSONAL;

-- directorio de postgrsql
SHOW data_directory
 








